// сортировка значений int , double и long в объектах
// sort users by age
List<User> userList = new ArrayList<>(Arrays.asList( 
 new User("John", 33), 
 new User("Robert", 26), 
 new User("Mark", 26), 
 new User("Brandon", 42))); 
 
// ascending
 List<User> sortedList = userList.stream() 
 .sorted(Comparator.comparingInt(User::getAge)) 
 .collect(Collectors.toList()); 
 
 sortedList.forEach(System.out::println); 


// descending
 List<User> sortedList = userList.stream() 
 .sorted(Comparator.comparingInt(User::getAge).reversed()) 
 .collect(Collectors.toList()); 
 
 sortedList.forEach(System.out::println); 


* Есть несколько из этих встроенных компараторов, которые работают с числами ( int , double и long ) - comparingInt() , comparingDouble() и comparingLong() . 
В конечном итоге вы также можете просто использовать метод comparing() , который принимает ключевую функцию сортировки, как и другие



// сортировка строк (с помощью отдельного класса Comparator)
public class Program {
 
    public static void main(String[] args) {
 
        Stream<Phone> phoneStream = Stream.of(new Phone("iPhone X", "Apple", 600), 
            new Phone("Pixel 2", "Google", 500),
            new Phone("iPhone 8", "Apple",450),
            new Phone("Nokia 9", "HMD Global",150),
            new Phone("Galaxy S9", "Samsung", 300));
         
        phoneStream.sorted(new PhoneComparator())
                .forEach(p->System.out.printf("%s (%s) - %d \n", 
                        p.getName(), p.getCompany(), p.getPrice()));
         
    } 
}
class PhoneComparator implements Comparator<Phone>{
  
    public int compare(Phone a, Phone b){
      
        return a.getName().toUpperCase().compareTo(b.getName().toUpperCase());
    }
}



* сортировка метанит https://metanit.com/java/tutorial/10.8.php
* сортировка доп сайт https://rukovodstvo.net/posts/id_576/